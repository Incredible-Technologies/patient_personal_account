import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ProfileService } from 'src/app/core/services/profile.service';
import { ProfileData } from 'src/app/core/models/profile-data.model';
import { ResultCard } from 'src/app/core/models/result-card.model';
import { ToastrService } from 'ngx-toastr';
import { ResultCardService } from 'src/app/core/services/result-card.service';

@Component({
  selector: 'app-medical-card',
  templateUrl: './medical-card.component.html',
  styleUrls: ['./medical-card.component.scss'],
})
export class MedicalCardComponent implements OnInit {
  profileForm!: FormGroup;
  isEditing = false;
  profileData!: ProfileData; // Define a property to hold the profile data

  resultCards: ResultCard[] = [];
  doneResultCards: ResultCard[] = [];
  notDoneResultCards: ResultCard[] = [];
  isEditingResultCard = false;
  resultCardForm!: FormGroup; // Add FormGroup for result card editing
  createResultCardForm!: FormGroup; // Form for creating a new result card

  selectedResultCard: ResultCard | null = null; // To hold the selected card for editing

  constructor(
    private fb: FormBuilder,
    private profileService: ProfileService,
    private toastr: ToastrService, // Inject ToastrService
    private resultCardService: ResultCardService
  ) {}

  ngOnInit(): void {
    this.initializeForm();
    this.loadProfile();
    this.loadAllUserCards();
    this.loadAllDoneUserCards();
    this.loadAllNotDoneUserCards();
    this.initializeCreateResultCardForm();
    this.initializeResultCardForm(); // Initialize form for result card editing
    this.resultCardService.getAllUserCards().subscribe((cards) => {
      console.log(cards); // Check the structure of the response
      this.resultCards = cards;
    });
  }

  isShowingMRI = false;
  mriImageUrl = '';

  initializeForm(): void {
    this.profileForm = this.fb.group({
      firstName: [''], // Add default values as needed
      middleName: [''], // Add default values as needed
      lastName: [''], // Add default values as needed
      dateOfBirth: [''], // Add default values as needed
      gender: [''], // Add default values as needed
      address: [''], // Add default values as needed
      phoneNumber: [''], // Add default values as needed
      mriImageUrl: [''],
    });
  }

  initializeCreateResultCardForm(): void {
    this.createResultCardForm = this.fb.group({
      name: ['', Validators.required], // e.g., 'Blood Test', 'X-Ray'
      description: ['', Validators.required], // e.g., 'Routine blood test for sugar levels'
      dateOfMake: ['', Validators.required], // This may be auto-set in the backend, depends on your logic
      dateOfShouldReady: ['', Validators.required], // e.g., '2023-12-01'
      dateOfDelivered: [''], // This might be set when the results are actually delivered
      hospitalAddress: ['', Validators.required], // e.g., '123 Health St., Meditown'
      resultFileId: [''], // This will likely be set when a file is uploaded/associated
      // You may exclude `id` as it is typically auto-generated by the backend
    });
  }

  loadProfile(): void {
    this.profileService.getProfile().subscribe({
      next: (profile) => {
        console.log(profile, 'prof');
        if (profile) {
          this.profileForm.patchValue(profile);
          this.profileData = profile;
        } else {
          this.toastr.info('Пожалуйста, заполните информацию в вашем профиле.');
          // Redirect to profile completion page if needed
        }
      },
      error: (error) => {
        // Handle errors if needed
      },
    });
  }

  toggleEdit(): void {
    this.isEditing = !this.isEditing;
    if (!this.isEditing) {
      // Reload profile data when exiting edit mode
      this.loadProfile();
    }
  }

  saveProfile(): void {
    if (this.profileForm.valid) {
      this.profileService.saveProfile(this.profileForm.value).subscribe(() => {
        this.toggleEdit();
        this.loadProfile(); // Reload the profile data to reflect the changes
      });
    }
  }

  createResultCard(): void {
    if (this.createResultCardForm.valid) {
      this.resultCardService
        .createResultCard(this.createResultCardForm.value)
        .subscribe({
          next: (resultCard) => {
            // Handle successful creation
            // For example, add the newly created card to the resultCards array
            this.resultCards.push(resultCard);
            this.toastr.success('Result card created successfully');
          },
          error: (error) => {
            // Handle error scenario
            this.toastr.error('Failed to create result card');
          },
        });
    }
  }

  loadAllUserCards() {
    this.resultCardService.getAllUserCards().subscribe({
      next: (cards) => (this.resultCards = cards),
      error: (error) => console.error('Error fetching result cards:', error),
    });
  }

  loadAllDoneUserCards() {
    this.resultCardService
      .getAllDoneUserCards()
      .subscribe((cards) => (this.doneResultCards = cards));
  }

  loadAllNotDoneUserCards() {
    this.resultCardService
      .getAllNotDoneUserCards()
      .subscribe((cards) => (this.notDoneResultCards = cards));
  }

  toggleEditResultCard(card: ResultCard): void {
    this.isEditingResultCard = !this.isEditingResultCard;
    this.selectedResultCard = card;
    // Assuming you have a form to edit the result card, you can populate it here
    this.resultCardForm.patchValue(card); // or specific fields as needed
  }

  saveResultCard(): void {
    if (this.resultCardForm.valid) {
      // Logic to update the result card
      // This could involve calling an update service method
      // and then updating the resultCards array
      this.isEditingResultCard = false;
    }
  }

  initializeResultCardForm(): void {
    this.resultCardForm = this.fb.group({
      cardId: ['', Validators.required],
      cardName: ['', Validators.required],
      cardDescription: ['', Validators.required],
      // other fields as needed
    });
  }

  async onAddMRI(): Promise<void> {
    const pickerOpts = {
      types: [
        {
          description: 'Images',
          accept: {
            'image/*': ['.png', '.gif', '.jpeg', '.jpg'],
          },
        },
      ],
      excludeAcceptAllOption: true,
      multiple: false,
    };

    let fileHandle;

    [fileHandle] = await (window as any).showOpenFilePicker(pickerOpts);
    const fileData = await fileHandle.getFile();
    this.mriImageUrl = window.URL.createObjectURL(fileData);

    // this.profileService
    //   .saveProfile({
    //     ...this.profileData,
    //     mriImageUrl: window.URL.createObjectURL(fileData),
    //   })
    //   .subscribe(() => {
    //     this.toggleEdit();
    //     this.loadProfile(); // Reload the profile data to reflect the changes
    //   });
  }
}
